{"version":3,"sources":["../src/data-table/DataTable.tsx","../src/utils/setCustomColorProperty.ts","../src/utils/dataSorting.ts","../src/components/table-header/TableHeader.tsx","../src/components/table-body/TableBody.tsx","../src/components/table-entries-selector/TableEntriesSelector.tsx","../src/components/table-filter/TableFilter.tsx","../src/components/table-info/TableInfo.tsx","../src/components/table-pagination/TablePagination.tsx"],"names":["useState","useMemo","useEffect","useCallback","setCustomColorProperty","variableName","color","defaultColor","hexColor","colorOpacity85","colorOpacity20","sortData","data","sorting","column","order","b","valueA","valueB","React","jsx","jsxs","TableHeader","columns","onSortingChange","handleColumnClick","index","TableHeader_default","TableRow","row","columnIndex","TableBody","displayedData","TableBody_default","TableEntriesSelector","numberOfEntries","onEntriesChange","event","option","TableEntriesSelector_default","TableFilter","onSearchInput","onInputChange","inputValue","filteredRows","TableInfo","dataLength","dataStateLength","displayedDataStart","displayedDataEnd","entryLabel","getEntriesRangeText","getFilteredEntriesText","TablePagination","currentPage","onPageChanges","totalPages","canNavigatePrevious","canNavigateNext","maxButtonsToShow","halfButtonsCount","generateRange","start","end","_","getPagination","handlePageChange","page","DEFAULT_MAIN_COLOR","DEFAULT_ACCENT_COLOR","DataTable","className","mainColor","accentColor","dataState","setDataState","originalDataLength","setOriginalDataLength","setSorting","setNumberOfEntries","setPage","handleNumberOfEntriesChange","newNumberOfEntries","handleSortingChange","newSorting","handleSearchInput","newDataState","sortedData"],"mappings":"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","sourcesContent":["/**\r\n * DataTable.tsx\r\n */\r\n\r\n// Import styles\r\nimport \"./DataTable.css\";\r\n\r\n// Import interfaces\r\nimport { IRow, ISorting, IDataTableProps } from \"../interfaces/data-table-interfaces\";\r\n\r\n// Import hooks and utils\r\nimport { useState, useMemo, useEffect, useCallback } from \"react\";\r\nimport { setCustomColorProperty } from \"../utils/setCustomColorProperty\";\r\nimport { sortData } from \"../utils/dataSorting\";\r\n\r\n// Import components\r\nimport TableHeader from \"../components/table-header/TableHeader\";\r\nimport TableBody from \"../components/table-body/TableBody\";\r\nimport TableEntriesSelector from \"../components/table-entries-selector/TableEntriesSelector\";\r\nimport TableFilter from \"../components/table-filter/TableFilter\";\r\nimport TableInfo from \"../components/table-info/TableInfo\";\r\nimport TablePagination from \"../components/table-pagination/TablePagination\";\r\n\r\n// Default table colors\r\nconst DEFAULT_MAIN_COLOR = \"#081f37\";\r\nconst DEFAULT_ACCENT_COLOR = \"#5fc9f3\";\r\n\r\n/**\r\n * DataTable root component.\r\n *\r\n * This component serves as the central controller for the DataTable, managing its core functionality.\r\n * It controls and manipulates various states such as data, sorting, pagination, and custom colors.\r\n *\r\n * @param props - Data Table Props\r\n * @param props.data - The table data to display.\r\n * @param props.columns - The configuration of table columns.\r\n * @param props.mainColor - The main color for custom styling (optional).\r\n * @param props.accentColor - The accent color for custom styling (optional).\r\n * @returns - The DataTable component.\r\n */\r\nexport const DataTable = ({ data = [], columns, className, mainColor, accentColor }: IDataTableProps) => {\r\n  // This state contains the table data and can be manipulated (sorted, filtered, etc.).\r\n  // This state allow the original data integrity to be preserved.\r\n  const [dataState, setDataState] = useState(data);\r\n\r\n  const [originalDataLength, setOriginalDataLength] = useState(data.length);\r\n\r\n  // Update dataState and originalDataLength if data changes\r\n  useEffect(() => {\r\n    setDataState(data);\r\n    setOriginalDataLength(data.length);\r\n  }, [data]);\r\n\r\n  // This state is used to perform sorting (ascending or descending) of table entries.\r\n  const [sorting, setSorting] = useState<ISorting>({\r\n    column: columns[0].data,\r\n    order: \"asc\",\r\n  });\r\n  // This state manages the display of a certain number of entries in the table, with 10 as the default.\r\n  const [numberOfEntries, setNumberOfEntries] = useState(10);\r\n  // This state is used to manage table pagination, with the first page displayed by default.\r\n  const [page, setPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    if (typeof document !== \"undefined\") {\r\n      // Set custom color properties for the component, using values from props if provided, or default colors if not.\r\n      setCustomColorProperty(\"--main-color\", mainColor, DEFAULT_MAIN_COLOR);\r\n      setCustomColorProperty(\"--accent-color\", accentColor, DEFAULT_ACCENT_COLOR);\r\n    }\r\n  }, [mainColor, accentColor]);\r\n\r\n  // This memoized handler updates the number of displayed entries and resets the page to 1 when the number of entries changes.\r\n  const handleNumberOfEntriesChange = useCallback((newNumberOfEntries: number) => {\r\n    setNumberOfEntries(newNumberOfEntries);\r\n    setPage(1);\r\n  }, []);\r\n\r\n  // This memoized handler updates the sorting criteria and resets the page to 1 when the sorting changes.\r\n  const handleSortingChange = useCallback((newSorting: ISorting) => {\r\n    setSorting(newSorting);\r\n    setPage(1);\r\n  }, []);\r\n\r\n  // This handler updates the data state based on the search input and resets the page to 1 when the data state changes.\r\n  const handleSearchInput = (newDataState: IRow[]) => {\r\n    setDataState(newDataState);\r\n    setPage(1);\r\n  };\r\n\r\n  // We use the useMemo hook to cache sorted and displayed data related variables to improve performance.\r\n  // These variables are recalculated only when dependent variables change.\r\n  const sortedData = useMemo(() => sortData(dataState, sorting), [dataState, sorting]);\r\n  const displayedDataStart = useMemo(() => (page - 1) * numberOfEntries, [page, numberOfEntries]);\r\n  const displayedDataEnd = useMemo(\r\n    () => (page * numberOfEntries > dataState.length ? dataState.length : page * numberOfEntries),\r\n    [page, numberOfEntries, dataState.length]\r\n  );\r\n  const displayedData = useMemo(\r\n    () => sortedData.slice(displayedDataStart, displayedDataEnd),\r\n    [sortedData, displayedDataStart, displayedDataEnd]\r\n  );\r\n\r\n  return (\r\n    <div className={`DataTable_global_wrapper ${className}`}>\r\n      <div className='DataTable_small_screen_unsupported'>\r\n        Oops, this table is not small-screen friendly. Please switch to a larger device for the best experience.\r\n      </div>\r\n      <div className='DataTable_top'>\r\n        <TableEntriesSelector numberOfEntries={numberOfEntries} onEntriesChange={handleNumberOfEntriesChange} />\r\n        <TableFilter data={data} onSearchInput={handleSearchInput} />\r\n      </div>\r\n      <div className='DataTable_content_wrapper'>\r\n        <table className='DataTable'>\r\n          <TableHeader columns={columns} sorting={sorting} onSortingChange={handleSortingChange} />\r\n          <TableBody columns={columns} displayedData={displayedData} />\r\n        </table>\r\n      </div>\r\n      <div className='DataTable_bottom'>\r\n        <TableInfo\r\n          dataLength={originalDataLength}\r\n          dataStateLength={dataState.length}\r\n          displayedDataStart={displayedDataStart}\r\n          displayedDataEnd={displayedDataEnd}\r\n        />\r\n        <TablePagination\r\n          currentPage={page}\r\n          numberOfEntries={numberOfEntries}\r\n          dataStateLength={dataState.length}\r\n          onPageChanges={setPage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/**\r\n * setCustomColorProperty.ts\r\n *\r\n * Sets a custom color property on the document's root element for use as a CSS variable.\r\n * Validates the hexadecimal format; if it's not valid, it logs an error and sets the default color as a fallback.\r\n *\r\n * @param variableName - The name of the custom CSS variable to set.\r\n * @param color - The color value to set for the CSS variable.\r\n * @param defaultColor - The default color value to use if the provided color is invalid.\r\n */\r\nexport function setCustomColorProperty(variableName: string, color: string, defaultColor: string) {\r\n  // Use the provided color or the default color if it's not provided.\r\n  color = color || defaultColor;\r\n\r\n  // Helper function to validate the color format.\r\n  const isValidHexColor = (hexColor: string) => /^#([0-9A-Fa-f]{6})$/.test(hexColor);\r\n\r\n  // Check if the provided color is a valid hexadecimal color.\r\n  if (!isValidHexColor(color)) {\r\n    console.error(\r\n      `Invalid format for property '${variableName}', please enter a valid hexadecimal format with 7 characters, for example, '#007bff'.`\r\n    );\r\n    // Use the default color as a fallback.\r\n    color = defaultColor;\r\n  }\r\n\r\n  // Calculate opacity variations for the main color.\r\n  if (variableName === \"--main-color\") {\r\n    const colorOpacity85 = color + \"D9\"; // D9 represents 85% opacity in hexadecimal\r\n    const colorOpacity20 = color + \"33\"; // 33 represents 20% opacity in hexadecimal\r\n\r\n    // Set the custom CSS variables on the document's root element.\r\n    document.documentElement.style.setProperty(variableName, color);\r\n    document.documentElement.style.setProperty(variableName + \"-opacity-85\", colorOpacity85);\r\n    document.documentElement.style.setProperty(variableName + \"-opacity-20\", colorOpacity20);\r\n  } else {\r\n    // Set the custom CSS variable on the document's root element without opacity variations.\r\n    document.documentElement.style.setProperty(variableName, color);\r\n  }\r\n}\r\n","/**\r\n * dataSorting.ts\r\n */\r\n\r\n// Import interfaces\r\nimport { IRow, ISorting } from \"../interfaces/data-table-interfaces\";\r\n\r\n/**\r\n * Sorts an array of data rows based on the specified sorting criteria.\r\n *\r\n * @param data - The array of data rows to be sorted.\r\n * @param sorting - The sorting criteria (column and order).\r\n * @returns The sorted array of data rows.\r\n */\r\nexport function sortData(data: IRow[], sorting: ISorting): IRow[] {\r\n  const { column, order } = sorting;\r\n  \r\n  return [...data].sort((a, b) => {\r\n    const valueA = a[column];\r\n    const valueB = b[column];\r\n\r\n    if (valueA < valueB) {\r\n      return order === \"asc\" ? -1 : 1;\r\n    }\r\n    if (valueA > valueB) {\r\n      return order === \"asc\" ? 1 : -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n","/**\r\n * TableHeader.tsx\r\n */\r\n\r\n// Import styles\r\nimport \"./TableHeader.css\";\r\n\r\n// Import interfaces\r\nimport { ITableHeaderProps } from \"../../interfaces/data-table-interfaces\";\r\nimport React from \"react\";\r\n\r\n/**\r\n * Memoized component for rendering the table header, including column headers with sorting functionality.\r\n *\r\n * @param columns - The configuration of table columns.\r\n * @param sorting - The current sorting criteria (column data and order \"asc\" or \"desc\").\r\n * @param onSortingChange - A callback function to handle changes in sorting criteria.\r\n * @returns The TableHeader component.\r\n */\r\nconst TableHeader = React.memo(({ columns, sorting, onSortingChange }: ITableHeaderProps) => {\r\n  /**\r\n   * Callback function to handle column header click events for sorting.\r\n   * It toggles the sorting order and calls the onSortingChange callback.\r\n   *\r\n   * @param column - The column data identifier.\r\n   */\r\n  const handleColumnClick = (column: string) => {\r\n    // Toggle the sorting order for the clicked column\r\n    onSortingChange({\r\n      column,\r\n      order: sorting.column === column ? (sorting.order === \"asc\" ? \"desc\" : \"asc\") : \"asc\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <thead id='TableHeader' data-testid='table-header'>\r\n      <tr>\r\n        {columns.map((column, index) => (\r\n          <th key={index}>\r\n            <div>\r\n              <button\r\n                type='button'\r\n                className={`sort-button ${sorting.column === column.data ? sorting.order : \"\"}`}\r\n                onClick={() => handleColumnClick(column.data)}\r\n              >\r\n                {column.title}\r\n                {/* Display sorting arrows based on sorting criteria */}\r\n                <div className='arrow-container'>\r\n                  <span\r\n                    className={`arrow-up ${sorting.column === column.data && sorting.order === \"asc\" ? \"active\" : \"\"}`}\r\n                  ></span>\r\n                  <span\r\n                    className={`arrow-down ${\r\n                      sorting.column === column.data && sorting.order === \"desc\" ? \"active\" : \"\"\r\n                    }`}\r\n                  ></span>\r\n                </div>\r\n              </button>\r\n            </div>\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n});\r\n\r\nexport default TableHeader;\r\n","/**\r\n * TableBody.tsx\r\n */\r\n\r\n// Import styles\r\nimport \"./TableBody.css\";\r\n\r\n// Import interfaces\r\nimport { IColumn, IRow, ITableBodyProps } from \"../../interfaces/data-table-interfaces\";\r\nimport React from \"react\";\r\n\r\n/**\r\n * Memoized Table Row component\r\n *\r\n * @param row - The data for the row.\r\n * @param columns - The configuration of table columns.\r\n * @returns The TableRow component.\r\n */\r\nconst TableRow = React.memo(({ row, columns }: { row: IRow; columns: IColumn[] }) => {\r\n  return (\r\n    <tr>\r\n      {columns.map((column, columnIndex) => (\r\n        <td key={`${row.id}-${columnIndex}`} data-testid={`data-cell-for-column-${column.data}`}>\r\n          <div>{row[column.data]}</div>\r\n        </td>\r\n      ))}\r\n    </tr>\r\n  );\r\n});\r\n\r\n/**\r\n * Component for rendering the body of the data table.\r\n * If there is no data to display a message \"No data available\" is displayed instead.\r\n *\r\n * @param columns - The configuration of table columns.\r\n * @param displayedData - The data to be displayed in the table body.\r\n * @returns The TableBody component.\r\n */\r\nconst TableBody = React.memo(({ columns, displayedData }: ITableBodyProps) => {\r\n  // Display a warning if any objects in the displayedData array lack the 'id' property,\r\n  // which is essential for uniquely identifying items in the data table.\r\n  if (displayedData.some((row) => !row.id)) {\r\n    console.warn(\r\n      \"All object items to be displayed in the data table should have a property 'id' with a unique identifier.\"\r\n    );\r\n  }\r\n\r\n  return (\r\n    <tbody id='TableBody' data-testid='table-body' key={displayedData.length}>\r\n      {displayedData.length === 0 ? (\r\n        <tr>\r\n          <td colSpan={columns.length} id='TableBody_no-data' data-testid='table-body-no-data'>\r\n            <div>No data available</div>\r\n          </td>\r\n        </tr>\r\n      ) : (\r\n        displayedData.map((row, index) => <TableRow key={(row.id || index).toString()} row={row} columns={columns} />)\r\n      )}\r\n    </tbody>\r\n  );\r\n});\r\n\r\nexport default TableBody;\r\n","/**\r\n * TableEntriesSelector.tsx\r\n */\r\n\r\n// Import styles\r\nimport \"./TableEntriesSelector.css\";\r\n\r\n// Import interfaces\r\nimport { ITableEntriesSelectorProps } from \"../../interfaces/data-table-interfaces\";\r\nimport React from \"react\";\r\n\r\n/**\r\n * Memoized component for rendering a dropdown to select the number of entries to display per page in the table.\r\n *\r\n * @param numberOfEntries - The number of entries to be displayed per page.\r\n * @param onEntriesChange - A callback function to handle changes in the number of entries.\r\n * @returns The TableEntriesSelector component.\r\n */\r\nconst TableEntriesSelector = React.memo(({ numberOfEntries, onEntriesChange }: ITableEntriesSelectorProps) => {\r\n  const options = [5, 10, 15, 20, 25, 50, 100];\r\n\r\n  return (\r\n    <div id='TableEntriesSelector' data-testid='table-entries-selector'>\r\n      <label htmlFor='entries'>Show</label>\r\n      <select\r\n        id='entries'\r\n        value={numberOfEntries}\r\n        onChange={(event) => onEntriesChange(parseInt(event.target.value, 10))}\r\n      >\r\n        {options.map((option) => (\r\n          <option key={\"option-key-\" + option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <label htmlFor='entries'>entries</label>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TableEntriesSelector;\r\n","/**\r\n * TableFilter.tsx\r\n */\r\n\r\n// Import styles\r\nimport \"./TableFilter.css\";\r\n\r\n// Import interfaces\r\nimport { ITableFilterProps } from \"../../interfaces/data-table-interfaces\";\r\n\r\n/**\r\n * Component for rendering a search input field to filter data in the table.\r\n *\r\n * @param data - The table data to be filtered.\r\n * @param onSearchInput - A callback function to handle changes in the search input.\r\n * @returns The TableFilter component.\r\n */\r\nexport default function TableFilter({ data, onSearchInput }: ITableFilterProps) {\r\n  /**\r\n   * Callback function to handle changes in the search input.\r\n   * It filters the data based on the input value and calls the onSearchInput callback.\r\n   *\r\n   * @param inputValue - The current value of the search input.\r\n   */\r\n  function onInputChange(inputValue: string) {\r\n    // Filter the data based on the input value\r\n    const filteredRows = data.filter((row) => {\r\n      const rowValues = Object.values(row).join(\" \").toLowerCase();\r\n      return rowValues.includes(inputValue.toLowerCase());\r\n    });\r\n\r\n    // Call the onSearchInput callback with the filtered data\r\n    onSearchInput([...filteredRows]);\r\n  }\r\n\r\n  return (\r\n    <div id='TableFilter' data-testid='table-filter'>\r\n      <label htmlFor='search'>Search:</label>\r\n      <input\r\n        type='text'\r\n        id='search'\r\n        name='search'\r\n        // Call onInputChange when the input value changes\r\n        onChange={(event) => onInputChange(event.target.value)}\r\n        data-testid='table-filter-input'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","/**\r\n * TableInfo.tsx\r\n */\r\n\r\n// Import interfaces\r\nimport { ITableInfoProps } from \"../../interfaces/data-table-interfaces\";\r\n\r\n/**\r\n * Component for displaying information about the number of entries being displayed in the table.\r\n *\r\n * @param dataLength - The total number of entries in the original data.\r\n * @param dataStateLength - The number of entries after optional filtering.\r\n * @param displayedDataStart - The index of the first displayed entry.\r\n * @param displayedDataEnd - The index of the last displayed entry.\r\n * @returns The TableInfo component.\r\n */\r\nexport default function TableInfo({\r\n  dataLength,\r\n  dataStateLength,\r\n  displayedDataStart,\r\n  displayedDataEnd,\r\n}: ITableInfoProps) {\r\n  // Determine whether to use \"entry\" or \"entries\" based on the number of entries\r\n  const entryLabel = dataStateLength === 1 ? \"entry\" : \"entries\";\r\n\r\n  /**\r\n   * Generate text describing the range of displayed entries.\r\n   */\r\n  const getEntriesRangeText = () => {\r\n    if (dataStateLength === 0) return \"No entries\";\r\n\r\n    const start = displayedDataStart === 0 ? 1 : displayedDataStart + 1;\r\n    const end = displayedDataEnd;\r\n\r\n    return `Showing ${start} to ${end} of ${dataStateLength} ${entryLabel}`;\r\n  };\r\n\r\n  /**\r\n   * Generate text indicating the number of filtered entries, if applicable.\r\n   */\r\n  const getFilteredEntriesText = () => {\r\n    return dataLength === dataStateLength ? \"\" : ` (filtered from ${dataLength} total entries)`;\r\n  };\r\n\r\n  return (\r\n    <p data-testid='table-info'>\r\n      {getEntriesRangeText()}\r\n      {getFilteredEntriesText()}\r\n    </p>\r\n  );\r\n}\r\n","/**\r\n * TablePagination.tsx\r\n */\r\n\r\n// Import styles\r\nimport \"./TablePagination.css\";\r\n\r\n// Import interfaces\r\nimport { ITablePaginationProps } from \"../../interfaces/data-table-interfaces\";\r\n\r\n/**\r\n * Component for rendering pagination controls for navigating through table pages.\r\n *\r\n * @param currentPage - The current page number.\r\n * @param numberOfEntries - The number of entries displayed per page.\r\n * @param dataStateLength - The total number of entries after optional filtering.\r\n * @param onPageChanges - A callback function to handle page changes.\r\n * @returns The TablePagination component.\r\n */\r\nexport default function TablePagination({\r\n  currentPage,\r\n  numberOfEntries,\r\n  dataStateLength,\r\n  onPageChanges,\r\n}: ITablePaginationProps) {\r\n  // Calculate the total number of pages based on the number of entries and data length\r\n  const totalPages: number = Math.ceil(dataStateLength / numberOfEntries);\r\n\r\n  // Determine if it's possible to navigate to the previous and next pages\r\n  const canNavigatePrevious: boolean = currentPage > 1;\r\n  const canNavigateNext: boolean = currentPage < totalPages;\r\n\r\n  type OddNumber = 5 | 7 | 9 | 11 | 13 | 15 | 17 | 19 | 21;\r\n\r\n  // Number of pagination buttons (including ellipsis) to show. ⚠ Must be an odd number respecting the range defined in the OddNumber interface ! ⚠\r\n  const maxButtonsToShow: OddNumber = 7;\r\n  const halfButtonsCount: number = Math.floor(maxButtonsToShow / 2);\r\n\r\n  /**\r\n   * Generates an array of numbers within the specified range.\r\n   *\r\n   * @param start - The start of the range.\r\n   * @param end - The end of the range.\r\n   * @returns An array of numbers from start to end (inclusive).\r\n   *\r\n   * @example\r\n   * const start = 3;\r\n   * const end = 7;\r\n   * const range = generateRange(start, end);\r\n   * // range will be [3, 4, 5, 6, 7]\r\n   */\r\n  function generateRange(start: number, end: number): number[] {\r\n    return Array.from({ length: end - start + 1 }, (_, index) => start + index);\r\n  }\r\n\r\n  /**\r\n   * Generates pagination array.\r\n   * The number -1 will serves to represent ellipsis (...).\r\n   *\r\n   * @returns An array of numbers representing pagination.\r\n   *\r\n   * @example\r\n   * const totalPages = 10;\r\n   * const currentPage = 3;\r\n   * const pagination = getPagination();\r\n   * // pagination will be [1, 2, 3, 4, 5, -1, 10]\r\n   */\r\n  function getPagination(): number[] {\r\n    if (totalPages <= maxButtonsToShow) {\r\n      return generateRange(1, totalPages);\r\n    } else if (currentPage <= halfButtonsCount + 1) {\r\n      return [...generateRange(1, maxButtonsToShow - 2), -1, totalPages];\r\n    } else if (currentPage >= totalPages - halfButtonsCount) {\r\n      return [1, -1, ...generateRange(totalPages - maxButtonsToShow + 3, totalPages)];\r\n    } else {\r\n      return [\r\n        1,\r\n        -1,\r\n        ...generateRange(currentPage - halfButtonsCount + 2, currentPage + halfButtonsCount - 2),\r\n        -1,\r\n        totalPages,\r\n      ];\r\n    }\r\n  }\r\n\r\n  // Handle page change when a button is clicked\r\n  const handlePageChange = (page: number) => {\r\n    if (page >= 1 && page <= totalPages) {\r\n      onPageChanges(page);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id='TablePagination' data-testid='table-pagination'>\r\n      {/* Previous button */}\r\n      {totalPages > 1 && (\r\n        <button\r\n          className='TablePagination_button'\r\n          onClick={() => handlePageChange(currentPage - 1)}\r\n          disabled={!canNavigatePrevious}\r\n        >\r\n          Previous\r\n        </button>\r\n      )}\r\n\r\n      {/* Pagination buttons */}\r\n      {getPagination().map((page, index) => (\r\n        <button\r\n          key={index}\r\n          className={`${currentPage === page ? \"active\" : \"\"}`}\r\n          onClick={() => (page !== -1 ? handlePageChange(page) : null)}\r\n        >\r\n          {page === -1 ? \"...\" : page}\r\n        </button>\r\n      ))}\r\n\r\n      {/* Next button */}\r\n      {totalPages > 1 && (\r\n        <button\r\n          className='TablePagination_button'\r\n          onClick={() => handlePageChange(currentPage + 1)}\r\n          disabled={!canNavigateNext}\r\n        >\r\n          Next\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]}